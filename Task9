import SwiftUI


struct ContentView: View {
    private enum Constants {
        static let firstCirceId = UUID()
        static let secondCirceId = UUID()
        static let treshold = GraphicsContext.Filter.alphaThreshold(min: 0.5)
        static let blur = GraphicsContext.Filter.blur(radius: circleRadius / 2)
        static let circleRadius = 70.00
        static let circleSize = CGSize(width: circleRadius * 2, height: circleRadius * 2)
       
    }

    @State private var offset = CGSize.zero

    private let gradient = RadialGradient(
        gradient: Gradient(colors: [.yellow, .red]),
        center: .center,
        startRadius: Constants.circleRadius,
        endRadius: Constants.circleRadius * 2
    )

    var body: some View {
        Rectangle()
            .fill(gradient)
          
            .mask {
                Canvas { context, size in
                    guard
                        let symbol = context.resolveSymbol(id: Constants.firstCirceId),
                        let constantSymbol = context.resolveSymbol(id: Constants.secondCirceId)
                    else {
                        return
                    }
                    context.addFilter(Constants.treshold)
                    context.addFilter(Constants.blur)

                    context.drawLayer { ctx in
                        // Расчёт центра по фактическому size Canvas
                        let center = CGPoint(x: size.width / 2, y: size.height / 2)
                        ctx.draw(symbol, at: center)
                        ctx.draw(constantSymbol, at: center)
                    }
                } symbols: {
                    Circle()
                        .frame(width: Constants.circleSize.width, height: Constants.circleSize.height)
                        .offset(x: offset.width, y: offset.height)
                        .tag(Constants.firstCirceId)

                    Circle()
                        .frame(width: Constants.circleSize.width, height: Constants.circleSize.height)
                        .tag(Constants.secondCirceId)
                }
            }
            .overlay {
                Image(systemName: "cloud.sun.rain.fill")
                    .symbolRenderingMode(.hierarchical)
                    .font(.largeTitle)
                    .foregroundStyle(.white)
                    .offset(x: offset.width, y: offset.height)
            }
            .gesture(
                DragGesture()
                    .onChanged { offset = $0.translation }
                    .onEnded { _ in
                        withAnimation(.bouncy) {
                            offset = .zero
                        }
                    }
            )
            .ignoresSafeArea()
            .background(.black)
    }
}


